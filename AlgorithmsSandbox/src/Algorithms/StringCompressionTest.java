package Algorithms;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class StringCompressionTest {
    public static class TestData {
        public String stringInput;
        public String stringCompressed;

        public TestData(String string1, String string2) {
            this.stringInput = string1;
            this.stringCompressed = string2;
        }

        @Override
        public String toString() {
            return "compressed: " + stringCompressed + "; input: " + stringInput + ";";
        }
    }

    private static StringCompressionTest.TestData[] staticExamples = {
            new StringCompressionTest.TestData("aabcccccaaa", "a2b1c5a3")
    };

    private static final int MAX_STRING_LENGTH=100;
    private static final int TESTDATA_ARRAY_SIZE=1000;

    @Test
    void compressStringCommonTest() {
        testOnStaticExamples();
        testOnAutogeneratedExamples();
    }

    private void testOnStaticExamples() {
        for (TestData testData: staticExamples) {
            System.out.println(testData);
            assertEquals(testData.stringCompressed, StringCompression.compress(testData.stringInput));
        }
    }

    private void testOnAutogeneratedExamples() {
        TestData[] testDataArray = generateTestData();
        for (TestData testData: testDataArray) {
            System.out.println(testData);
            assertEquals(testData.stringInput, StringCompression.decompress(testData.stringCompressed));
        }
    }

    private TestData[] generateTestData() {
        TestData[] testData = new TestData[TESTDATA_ARRAY_SIZE];

        for (int i = 0; i < testData.length; i++) {
            // генерируем случайную длину строки
            int inputStringLength = genRandomInt(2, MAX_STRING_LENGTH);
            testData[i] = new TestData("","");
            StringBuilder builder = new StringBuilder();

            // заполняем строку до максимальной длины повторами случайных символов
            while (builder.length() < inputStringLength) {
                builder.append(genRandomRepeatedChars(inputStringLength-builder.length()));
            }

            testData[i].stringInput = builder.toString();
            testData[i].stringCompressed = StringCompression.compress(testData[i].stringInput);
        }

        return testData;
    }

    private int genRandomInt(int min, int max) {
        return (int) ((Math.random() * (max - min)) + min);
    }

    private char genRandomChar() {
        return (char)genRandomInt(97, 122);
    }

    private String genRandomRepeatedChars(int nMaxRepeats) {
        int nRepeats = genRandomInt(1, nMaxRepeats);
        return String.valueOf(genRandomChar()).repeat(nRepeats);
    }
}
